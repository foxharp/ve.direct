#!/bin/bash

# This script should be able to display and log data from any Victron
# product described in the VE.Direct Protocol pdf version 3.22, dated
# 28 Sept, 2016.  I only own a BMV-702, so output from other products
# hasn't been tested.
#
# The script can read a VE.Direct device and can display the data
# in real-time on a simulated "panel" display, as well as logging
# the data in CSV format for plotting or further analysis.  In addition,
# further invocations of the script can connect across a network to
# the first invocation as a source of data, and so can function as
# remote displays.  So an example deployment might run one invocation
# as a system daemon, connected to the device itself, while other
# invocations might drive a local display or might just be used to
# quickly check the battery state remotely.
#
# Network security is assured by using only unix domain sockets for
# communication.  Remote access is implemented using ssh to access
# the unix domain socket remotely.
#
# Only the read-only continuous output data implemented by VE.Direct
# devices is supported.  The interactive hexadecimal protocol is
# out of scope for this script (and probably for this language! ;-).
#
# paul fox, pgf@foxharp.boston.ma.us, autumn 2016
#

me=${0##*/}

usage()
{
    exec >&2
    cat <<-\EOF
usage: $me [options]
    options:
     --panel             Enable real-time display "panel" (default)
     --nopanel           Suppress the default real-time panel display.
     --snapshot          Show one panel "frame" on stdout, then quit.
     --plot              Enable creation of plot-ready CSV output file
                            (default if reading VE.Direct device directly)
     --noplot            Suppress the plot-ready CSV output file
                            (default if reading data from a remote script)
     --fahrenheit|-F     Display temperature in Fahrenheit (default)
     --celsius|-C        Display temperature in Celsius
     --backup            Copy input data to file, for reuse by "--test"
     --device=<device>   Attach to "device" for input from VE.Direct interface
     --remote=<host>     Get data from a copy of this script running on "host"
                             (default, if $VEDIRECT_HOST is set in environment)
     --logdir=<path>     Create all plot and log files in "path".
                             (defaults to current directory)
     --test=<testfile>   Fetch input from "testfile" instead of VE.Direct
     --raw               Format and show data directly as it arrives
                            (mostly for debug)
EOF
    exit 1
}

get_options()
{
    # configuration options:
    do_plot=1;	     # create CSV file suitable for creating graphs
    do_snap=;	     # do panel snapshot
    force_plot=;     # force, even if remote
    do_panel=1;	     # show real-time panel display of most useful data
    do_degF=1;	     # convert temperature to fahrenheit
    do_raw=;	     # display all data in "pretty" format, as it arrives
    do_data_backup=; # create reusable (with "--test") copy of all input data
    logpath=".";     # directory where logs and CSV files should live
    do_remotehost=;  # ssh to remote host, connect to socket there
    do_testfile=;    # read data from given file instead of VE.Direct device
    ve_device=;      # connect to VE.Direct device
    while [[ $# > 0 ]]
    do
	arg="$1"
	case $arg in
	--noplot)	do_plot=; ;;
	--plot)		force_plot=1 ;;
	--snapshot)	do_snap=1 ;;
	--panel)	do_panel=1 ;;
	--nopanel)	do_panel=; ;;
	--fah*|-F)	do_degF=1 ;;
	--cel*|-C)	do_degF=; ;;
	--raw)		do_raw=1 ;;
	--backup)	do_data_backup=1 ;;
	--logdir=*)
	    logpath=${arg#--logdir=}
	    if [[ ! $logpath ]]
	    then
		echo "No pathname given with --logdir" >&2
		usage
	    fi
	    ;;
	--remote=*)
	    do_remotehost=${arg#--remote=}
	    if [[ ! $do_remotehost ]]
	    then
		echo "No hostname given with --remote" >&2
		usage
	    fi
	    ;;
	--test=*)
	    do_testfile=${arg#--test=}
	    if [[ ! $do_testfile || ! -r $do_testfile ]]
	    then
		echo "$me: --test: '$do_testfile' is unreadable" >&2
		usage
	    fi
	    ;;
	--device=*)
	    ve_device=${arg#--device=}
	    if [[ ! $ve_device || ! -r $ve_device ]]
	    then
		echo "$me: --device: '$ve_device' is unreadable" >&2
		usage
	    fi
	    ;;
	*) usage ;;
	esac
	shift
    done

    inputs=0
    [[ $do_testfile ]] && ((inputs++))
    [[ $do_remotehost ]] && ((inputs++))
    [[ $ve_device ]] && ((inputs++))

    if (( $inputs > 1 ))
    then
	exec >&2
	echo "$me: Error: Specify just one of --remote=, --test=, or --device="
	exit 1
    fi

    # if snapshot'ing, don't plot or produce other log files
    if [[ $do_snap ]]
    then
	do_panel=1
	do_plot=;
	do_raw=;
	do_data_backup=;
    fi

    # allow an environment variable to direct us to a remote host
    # by default
    using_VEDIRECT_HOST=;
    if (( $inputs == 0 ))
    then
	if [[ ${VEDIRECT_HOST:-} ]]
	then
	    do_remotehost=$VEDIRECT_HOST
	    using_VEDIRECT_HOST=1;
	fi
    fi
}

misc_init()
{
    set -u  # catch undefined variables
    longest_desc=10
    desc_wid=10  # initial display width for label strings.  will adapt.
    ve_device=;
    first_field=;
    socket_out=;
    trap_kill=;
    last_started=0
    prev_TIME=0
}

# most of the fields are of a few simple types, differentiated by
# their display units.  also, the field names coming from the
# VE.Direct interface are very cryptic, e.g. "VS", "CE", "H2", etc.
# so we use two tables (units[] and descr[]) to associate a type and
# a full description with every field.  (descriptions that are commented
# out are the original descriptions from the Victron documentation)
# there are three "pseudo fields" in the list below, which aren't actually
# part of the Victron protocol, but rather are synthesized by the script:
#  TIME -- the BMV doesn't have a clock.  this synthesized field is the
#	    time (in seconds since the unix epoch) at which the current
#	    "frame" of data became available from VE.Direct.  (this lets
#	    the data's timestamp be displayed and plotted.)
#  Pcalc -- this is instantaneous power, in hundredths of a Watt, as
#           calculated from V * I.  (the P field sent from the BMV is
#           in whole Watts, so no fractions are available.)
#  ARstring -- this is a "string" version of AR.  the AR field is a
#           numeric bitfield encoding the Alarm Reason.  ARstring
#           translates that into text, e.g. the number '5' becomes
#	    "lowV,low%".  (better for display purposes.)
#  Tstart -- this is the time (in seconds) since the last engine start
#	    was detected (i.e., current draw greater than 50A).

init_descriptions()
{
    units[V]="mV";            descr[V]="Voltage" # descr[V]="Main (battery) voltage"
    units[VS]="mV";           descr[VS]="Auxiliary (starter) voltage"
    units[VM]="mV";           descr[VM]="Mid-point voltage of the battery bank"
    units[DM]=".1%";          descr[DM]="Mid-point deviation of the battery bank"
    units[VPV]="mV";          descr[VPV]="Panel voltage"
    units[PPV]="Watts";       descr[PPV]="Panel power"
    units[I]="mA";            descr[I]="Current" # descr[I]="Battery current"
    units[IL]="mA";           descr[IL]="Load current"
    units[LOAD]="none";       descr[LOAD]="Load output state (ON/OFF)"
    units[T]="degC";          descr[T]="Battery temp." #  descr[T]="Battery temperature"
    units[P]="Watts";         descr[P]="Instantaneous power"
    units[Pcalc]=".01Watts";  descr[Pcalc]="Power" # synthesized from V and I
    units[CE]="mAh";          descr[CE]="Charge consumed" # descr[CE]="Consumed Amp Hours"
    units[SOC]=".1%";         descr[SOC]="Capacity left" # descr[SOC]="State-of-charge"
    units[TTG]="minutes";     descr[TTG]="Time left" # descr[TTG]="Time-to-go"
    units[Alarm]="none";      descr[Alarm]="Alarm condition active"
    units[Relay]="none";      descr[Relay]="Relay state"
    units[AR]="alarm";        descr[AR]="Alarm reason"
    units[ARstring]="alarm";  descr[ARstring]="Alarm reason" # synthesized
    units[H1]="mAh";          descr[H1]="Depth of the deepest discharge"
    units[H2]="mAh";          descr[H2]="Depth of the last discharge"
    units[H3]="mAh";          descr[H3]="Depth of the average discharge"
    units[H4]="none";         descr[H4]="Number of charge cycles"
    units[H5]="none";         descr[H5]="Number of full discharges"
    units[H6]="mAh";          descr[H6]="Cumulative Amp Hours drawn"
    units[H7]="mV";           descr[H7]="Minimum main (battery) voltage"
    units[H8]="mV";           descr[H8]="Maximum main (battery) voltage"
    units[H9]="seconds";      descr[H9]="Time since full" # descr[H9]="Number of seconds since last full charge"
    units[H10]="none";        descr[H10]="Number of automatic synchronizations"
    units[H11]="none";        descr[H11]="Number of low main voltage alarms"
    units[H12]="none";        descr[H12]="Number of high main voltage alarms"
    units[H13]="none";        descr[H13]="Number of low aux. voltage alarms"
    units[H14]="none";        descr[H14]="Number of high aux. voltage alarms"
    units[H15]="mV";          descr[H15]="Minimum auxiliary (battery) voltage"
    units[H16]="mV";          descr[H16]="Maximum auxiliary (battery) voltage"
    units[H17]=".01kWh";      descr[H17]="Amount of discharged energy"
    units[H18]=".01kWh";      descr[H18]="Amount of charged energy"
    units[H19]=".01kWh";      descr[H19]="Yield total (user resettable counter)"
    units[H20]=".01kWh";      descr[H20]="Yield today"
    units[H21]="Watts";       descr[H21]="Maximum power today"
    units[H22]=".01kWh";      descr[H22]="Yield yesterday"
    units[H23]="Watts";       descr[H23]="Maximum power yesterday"
    units[ERR]="none";        descr[ERR]="Error code"
    units[CS]="none";         descr[CS]="State of operation"
    units[BMV]="ignore";      descr[BMV]="Model description (deprecated)"
    units[FW]="none";         descr[FW]="Firmware version"
    units[PID]="product";     descr[PID]="Product ID"
    units["SER#"]="none";     descr["SER#"]="Serial number"
    units[HSDS]="none";       descr[HSDS]="Day sequence number (0..364)"
    units[MODE]="none";       descr[MODE]="Device mode"
    units[AC_OUT_V]=".01V";   descr[AC_OUT_V]="AC output voltage"
    units[AC_OUT_I]=".1A";    descr[AC_OUT_I]="AC output current"
    units[WARN]="none";       descr[WARN]="Warning reason"
    units[TIME]="daytime";    descr[TIME]="Time" # synthesized
    units[Tstart]="minutes";  descr[Tstart]="Time since engine start" # synthesized
    units[Checksum]="ignore"; descr[Checksum]="Checksum"  # ignored

    # Alarm reason (AR) bits:
    alarm[0]="lowV";     # Low Voltage            # both
    alarm[1]="highV";    # High Voltage           # both
    alarm[2]="low%";     # Low SOC                # BMV only
    alarm[3]="lowAuxV";  # Low Starter Voltage    # BMV only
    alarm[4]="highAuxV"; # High Starter Voltage   # BMV only
    alarm[5]="lowT";     # Low Temperature        # both
    alarm[6]="lowT";     # High Temperature       # both
    alarm[7]="midV";     # Mid Voltage            # BMV only
    alarm[8]="ovrload";  # Overload               # inverter only
    alarm[9]="DCripple"; # DC-ripple              # inverter only
    alarm[10]="lowACV";  # Low V AC out           # inverter only
    alarm[11]="highACV"; # High V AC out          # inverter only

}

# the script instance that talks to the VE.Direct device becomes a
# server by creating a listening socket, in order to share data with
# other instances.  it does this using the command in "$data_server".
#
# other instances of the script on that machine become clients by
# using the command in "$data_client".
#
# note that the $data_server and $data_client commands *always run on
# the same machine*, which is the machine where the VE.Direct device
# is connected.  Any "remoteness" is taken care of independently by
# ssh.  So $data_server and $data_client should be chosen solely based
# on what's available on the machine directly attached to the Victron
# device.
#
# there are currently three choices for $data_server and $data_client: 
# 1) the first, based on the GNU program "ncat", has the very nice
# feature that multiple remote clients can connect at once, and they
# all get copies of the data the server is sending.  2) the second is
# based on "socat", and it can't provide that behavior.  if more than
# one client connects, they each get some of the output.  but it's more
# readily available than ncat, and most of the time there's only one
# client connecting anyway.  3) the third choice uses the widely
# available nc command.  4) the fourth choice also uses nc, but with
# internet sockets, because many implementations of nc on embedded
# systems (based on busybox) don't support UNIX domain sockets.  the
# port can (and should) be firewalled -- it's never accessed from "off
# device".
#
# again, remember that the $data_server and $data_client commands
# always run on the same host.
#

# first choice:
data_server="ncat --send-only -i 4 -k -l -U /tmp/victron-socket"
data_client="ncat --recv-only -i 4 -U /tmp/victron-socket"

# second choice:
# data_server="socat -T4 -u STDIN UNIX-LISTEN:/tmp/victron-socket,fork"
# data_client="socat -T4 -u UNIX-CONNECT:/tmp/victron-socket STDOUT"

# third choice, untested:
# data_server="nc -l -U /tmp/victron-socket"
# data_client="nc -U /tmp/victron-socket"

# fourth choice, untested:
# data_server="nc -lk -p 6666"
# data_client="nc localhost  6666"

init_device_connections()
{
    # arrange for a known file descriptor to be our input stream
    if [[ $do_testfile ]]
    then
	echo Taking input from file $do_testfile...
	sleep .5
	exec 3< $do_testfile
	input_fd=3
	am_socket_writer=true;
    elif [[ $ve_device ]]
    then
	echo Taking input from device $ve_device...
	exec 3<$ve_device
	input_fd=3
	am_socket_writer=true;
	# set correct baud, and let all characters through except
	# carriage return (CR) characters
	stty -F $ve_device raw igncr 19200
    elif [[ $do_remotehost ]]
    then
	echo Taking input from $me running on remote host $do_remotehost...
	# if [[ $using_VEDIRECT_HOST ]]
	# then
	#     echo '(because $VEDIRECT_HOST is set.)'
	# fi

	coproc ssh_input { ssh $do_remotehost "sh -c '$data_client' "; }
	trap_kill+="$ssh_input_PID "
	input_fd=${ssh_input[0]}
	# while we *could* create another socket locally, it causes
	# big problems if you type "--remote=localhost", since we'll
	# be reading and writing the same socket.  hilarity ensues.
	am_socket_writer=;
	test "$force_plot" || do_plot=; # don't write plotfile unless forced
    else
	echo Taking input from another copy of $me running on local host...
	if [[ ! -S /tmp/victron-socket ]]
	then
	    echo No socket to connect to.  >&2
	    if [[ -e /tmp/victron-socket ]]
	    then
		echo '(/tmp/victron-socket exists but is not a socket.)' >&2
	    fi
	    exit 1
	fi
	coproc local_input { $data_client ; }
	trap_kill+="$local_input_PID "
	input_fd=${local_input[0]}
	am_socket_writer=;
	test "$force_plot" || do_plot=; # don't write plotfile unless forced
    fi

    # create the output socket
    if [[ $am_socket_writer ]]
    then
	# start the server.  we send data to its stdin, clients (other
	# instances of this script) connect via UNIX domain socket to
	# fetch that data.
	rm -f /tmp/victron-socket
	coproc output { $data_server ; }
	trap_kill+="$output_PID "
	socket_out=${output[1]}

	# connect at least one client to the server, so that we won't
	# hang if it blocks it's input when no one is listening.
	$data_client >/dev/null 2>&1 &
	trap_kill+="$! "
    fi
}

clear_screen()
{
    printf "\e[H\e[2J"
}

modulo_split()
{
    # the shell doesn't do decimal arithmetic.  so to
    # print 12036 mV as 12.036V, we do some arithmetic
    # to split the integer and fractional parts.
    #
    # (also used to split seconds and minutes into minutes and hours)
    #
    # leaves results in $Div and $Mod
    #
    local val modulo mod neg
    val=$1
    modulo=$2
    neg=;

    case $val in
    -*) neg='-'; val=${val#-} ;;
    esac

    mod=$((val % modulo))

    # in the above example, we want to be sure we get "036"
    # for the decimal part, and not just "36".
    case $modulo in
    100|60) decwid=02;;
    1000) decwid=03;;
    *) decwid=;;
    esac

    # convert it using %02d, %03d, or %d
    printf -v Mod "%${decwid}d" $mod
    Div=$neg$((val / modulo))
}

fraction()
{
    # split a number n into integer and fractional parts, where
    # the fractional part is $f digits long
    local f n
    f=$1
    n=000000000$2   # pad with leading zeros
    frac=${n: -$f}  # take the last $f chars of $n
    int=${n/%$frac/} # replace $frac at the end of $n with nothing
    int=$((10#$int)) # remove leading zeros, by forcing to base 10

    echo $int.$frac
}


format_display_line()
{
    local fld val units modulo
    fld="$1"
    val="$2"
    units="$3"
    modulo="$4"

    desc="${descr[$fld]}"

    if [[ $val ]]
    then
	# special case:  convert to degrees F for display, if requested
	if [[ $fld = "T" && $do_degF ]]
	then
	    val=$(((9 * val / 5) + 32))
	    units="degF"
	fi

	if [[ $modulo = none ]]
	then
	    printf "%-${desc_wid}s %s %s" "$desc" "$val" "$units"
	else
	    modulo_split "$val" "$modulo"
	    printf "%-${desc_wid}s %s.%s %s" "$desc" $Div $Mod "$units"
	fi
    fi
}

set_output()
{
    local field value
    field="$1"
    value="$2"

    [[ "$do_panel" ]] && display[$field]=$(format_display_line "$@")
    [[ "$do_raw" ]]   && printf "%s\n" "$(format_display_line "$@")"
    plot_data[$field]=$value
}

set_special_output()
{
    local field value formatted_value
    field="$1"
    value="$2"
    formatted_value="$3"
    # save the display info for later
    printf -v display[$field] "%-${desc_wid}s %s" "${descr[$field]}" "$formatted_value"
    if [[ "$do_raw" ]]
    then
	printf "%s\n" "${display[$field]}"
    fi
    plot_data[$field]=$value
}

set_time_output()
{
    local field value unit
    field="$1"
    value="$2"
    unit="$3"
    if (( $value < 0 ))
    then
	set_special_output $field $value "infinite"
    else
	split_time $unit $value
	set_special_output $field $value "$SplitTime"
    fi
    plot_data["$field"]="$value"
}

flush()
{
    local keep_reading
    local field everything_else

    # there's a pause in the BMV output just before the checksum byte.
    # as a result we very often read that byte (and newline) in the
    # very first read.  so we skip the first line, as well as empty
    # lines and Checksum lines.
    keep_reading=true
    while [[ $keep_reading ]]
    do
	if ! read -r field everything_else
	then
	    echo read failed while pre-reading lines
	    exit 1
	fi

	case "$field" in
	""|"Checksum") keep_reading=true ;;
	*) keep_reading=; ;;
	esac

    done <&$input_fd  # read input stream
}

emit_panel_display()
{
    local f len power

    if (( ! do_snap ))
    then
	clear_screen
    fi

    # here we choose the specific values to put in the "panel" display
    for f in TIME V I Pcalc CE SOC TTG H9 T Tstart ARstring
    do
	# use a shell trick to decide if display[$f] has a value
	if [[ ${display[$f]+isset} ]]
	then
	    if (( do_snap != 1 ))
	    then
		printf "%s\n" "${display[$f]}"
	    fi

	    # keep track of the longest description field, to size
	    # the width of the output in the future
	    len=${#descr[$f]}
	    if (( $len > $longest_desc ))
	    then
		longest_desc=$len
	    fi
	    # we used this display.  get rid of it
	    unset display[$f]
	fi
    done
    desc_wid=$(( $longest_desc + 2 ))
    # this is so we do our snapshot the second time through,
    # not the first, in order to make the formatting pretty
    if (( do_snap ))
    then
	: $(( do_snap++ ))
	if (( do_snap > 2 ))
	then
	    exit
	fi
    fi
}

emit_plot_data()
{
    local f comma

    # date and time used for logging and plotting
    printf -v now_date "%(%F)T" ${plot_data[TIME]}
    printf -v now_time "%(%T)T" ${plot_data[TIME]}

    if (( prev_TIME < ( ${plot_data[TIME]} - 1800 ) ))  # 30 minutes have passed
    then
	printf -v periodic_comment "%b%b" \
	    "# date, mV, mA, centiW, used mAh, SOC, time-left, degC, alarm\n" \
	    "# timestamp: $now_date-$now_time\n"
	prev_TIME=${plot_data[TIME]}
    else
	periodic_comment=;
    fi
    (
	test "$periodic_comment" && printf "%s" "$periodic_comment"

	# choose the values we might want to plot
	comma=;
	for f in TIME V I Pcalc CE SOC TTG T AR
	do
	    if [[ ${plot_data[$f]+isset} ]]
	    then
		printf "$comma%s" "${plot_data[$f]}"
		unset plot_data[$f]
	    else
		printf "$comma%s" "nodata"
	    fi
	    comma=', '
	done
	printf "\n"
    ) >>$logpath/bmv_plot-$now_date.csv
}

to_clients()
{
	local field value
	field="$1"
	value="$2"

	if [[ $am_socket_writer ]]
	then
	    : socket_out is $socket_out
	    printf "%s	%s\n" "$field" "$value" >&$socket_out || exit 1
	fi
}

split_time()   # sets SplitTime
{
    local unit value min sec hour day
    unit="$1"
    value="$2"

    # split seconds into minutes and seconds
    if [[ $unit = "seconds" ]]
    then
	modulo_split $value 60
	min=$Div
	sec=$Mod
    else
	min=$value
    fi
    # split minutes into hours and minutes
    modulo_split $min 60
    hour=$Div
    min=$Mod

    # split hours into days and hours
    modulo_split $hour 24
    day=$Div
    hour=$Mod

    # suppress days if zero
    if [[ $day > 0 ]]
    then
	day="${day}d "
    else
	day=""
    fi

    # format with seconds or not, depending on what we started with
    if [[ $unit = "seconds" ]]
    then
	printf -v SplitTime "%s%sh %sm %ss" \
	    "$day" "$hour" "$min" "$sec"
    else
	printf -v SplitTime "%s%sh %sm" \
	    "$day" "$hour" "$min"
    fi
}

synthesize_data()
{
    local reason comma

    # convert AR numeric bits to comma-separated strings
    reason=;
    comma=;
    if (( ${plot_data[AR]:-0} != 0 ))
    then
	for bit in {0..11}
	do
	    if (( $value & (1 << $bit) ))
	    then
		reason="$reason$comma${alarm[$bit]}"
		comma=","
	    fi
	done
	set_special_output ARstring $value "$reason"
    fi

    # calculate current power in 100ths of a watt
    power=$(( plot_data[V] * plot_data[I]  / 10000))
    set_output Pcalc $power Watts 100

    local now
    printf -v now "%(%s)T" -1

    # we only create a TIME value, and maintain an "engine_started"
    # file, if we own the device directly.
    if [[ $ve_device ]]
    then
	to_clients TIME $now
	plot_data[TIME]=$now
	printf -v newvalue "%(%F)T-%(%T)T" $now $now
	set_special_output TIME $now "$newvalue"

	# has the engine just been started?
	if (( plot_data[I] < -50000 ))  # 50 amps
	then
	    last_started=$now
	    echo $last_started > $logpath/engine_started
	fi

	# create the "time since last start" datum
	if [[ $last_started != 0 ]]
	then
	    tstart=$(( (now - last_started)/60 ))
	else
	    tstart="-1"
	fi
	to_clients Tstart $tstart
	set_time_output Tstart $tstart minutes
    fi
}

loop()
{
    local was_checksum unit badlines newvalue
    # assume we might have just missed reading the Checksum field
    was_checksum=1
    badlines=0

    if [ -e $logpath/engine_started ]
    then
	last_started=$(<$logpath/engine_started)
    fi

    while : top of loop
    do
	# read the fieldname and the value, and any extra text into
	# $tail.  use -r to suppress the special meaning of a '\'
	# character, because otherwise, if the checksum byte is '\', it will
	# escape the newline, and read will pull in two lines instead
	# of just one.
	if ! read -r field value tail
	then
	    echo read failed while reading lines
	    exit 1
	fi

	# the binary checksum character is a pain, since it might
	# equal a tab or a space, or be null (which the shell doesn't
	# handle at all).  so when we see we're reading a Checksum
	# line, we ignore errors.  the checksum byte might also be a
	# newline, in which case we'll get an extra blank line.  so we
	# ignore blank lines if they immediately follow a checksum.
	if [[ $field = Checksum ]]
	then
	    was_checksum=1
	    continue
	fi

	# try to skip blank lines that follow a Checksum line
	if [[ $was_checksum ]]
	then
	    if [[ ! $field ]]
	    then
		was_checksum=;
		continue
	    fi
	fi
	was_checksum=;

	# check for an empty field or value, and also for extra trailing
	# text on the line.
	if [[ ! $value || ! $field || $tail ]]
	then
	    (
	    echo -n "Something is wrong: "
	    test "$tail" && echo "too much data on a line"
	    test "$value" || echo "not enough data on a line"
	    printf "line is '%s\t%s %s'\n" "$field" "$value" "$tail"
	    printf "line is '%s\t%s %s'\n" "$field" "$value" "$tail" | hexdump -C
	    ) >&2

	    # this error can happen if we've blocked trying to write
	    # to the server, probably because it has no clients,
	    # and its buffers fill up.  we'll lose serial data while
	    # blocked, and when the server unblocks, we start reading the
	    # serial device again, perhaps in the middle of a line,
	    # which causes errors.  we'll try reading a couple of
	    # lines to resynchronize, but we won't try forever.
	    if (( badlines++ < 3 ))
	    then
		continue  # try for another line
	    fi
	    exit 1
	fi
	badlines=0

	# optionally save the raw data to a file
	if [[ $do_data_backup ]]
	then
	    local now_date now_time
	    printf -v now_date "%(%F)T" -1
	    printf -v now_time "%(%T)T" -1
	    printf "%s-%s	%s	%s\n" \
		"$now_date" "$now_time" "$field" "$value" >> $logpath/bmv-$now_date.log
	fi

	# if we're the "master" script (reading the VE.Direct device)
	# make a copy of the received data available on a socket that
	# another copy of this script can connect to and use.
	to_clients "$field" "$value"

	# we use the periodic reappearance of the first field we
	# to flush any accumulated output.  so make a note of it,
	# and compare later on.
	if [[ ! $first_field ]]
	then
	    first_field=$field
	elif [[ $field == $first_field ]]
	then
	    # this is the point at which we've seen every key/value
	    # pair -- they're about to start repeating.  so now's the
	    # time to synthesize any data we need, and produce any
	    # output

	    synthesize_data

	    if [[ $do_panel && ! $do_raw ]]
	    then
		emit_panel_display
	    fi

	    if [[ $do_plot ]]
	    then
		emit_plot_data
	    fi

	    test "$do_testfile" && sleep .2
	fi

	unit=${units[$field]-unknown}
	case $unit in
	"mV")	    set_output $field $value Volts 1000 ;;
	".01V")	    set_output $field $value Volts 100 ;;
	"mA")	    set_output $field $value Amps  1000 ;;
	".1A")	    set_output $field $value Amps  10 ;;
	"mAh")	    set_output $field $value Ah    1000 ;;
	".01kWh")   set_output $field $value kWh   100 ;;
	".1%")	    set_output $field $value %     10 ;;
	"Watts")    set_output $field $value Watts none ;;
	".01Watts") set_output $field $value Watts 100 ;;
	"none")	    set_output $field $value ""    none ;;
	"degC")     set_output $field $value degC  none ;;
	"ignore")                                        ;;

	"minutes"|"seconds")
	    set_time_output $field $value $unit
	    ;;

	"daytime")
	    local newvalue
	    printf -v newvalue "%(%F)T-%(%T)T" $value $value
	    set_special_output $field $value "$newvalue"
	    # test "$do_raw" && printf "%s\n" "${display[$field]}"
	    ;;

	"alarm")
	    set_output AR "$value" "" none
	    ;;

	"product")
	    case $value in
            0x20[345])              newvalue=BMV-70X ;;
            0x300|0xA0[45][0-9A-F]) newvalue="BlueSolar MPPT" ;;
            0xA2[012][124])         newvalue="Phoenix Inverter" ;;
	    *)			    newvalue="Unknown product" ;;
	    esac

	    set_special_output $field $value "$newvalue"
	    ;;
	"unknown")
	    echo "Warning: unknown field name '$field', value '$value'" >&2
	    ;;
	esac

    done <&$input_fd  # read input stream
}

# declare associative arrays at global scope
declare -A units descr alarm display plot_data

exit_trapfunc()
{
    if [[ $socket_out ]]
    then
	: socket_out is $socket_out
	rm -f /tmp/victron-socket
    fi
    if [[ $trap_kill ]]
    then
	# processes might already be dead
	kill $trap_kill 2>/dev/null
    fi
}

# echo $$ >/tmp/$me.pid

trap "exit_trapfunc" 0
misc_init
get_options "$@"

init_descriptions
init_device_connections

flush
loop

exit



